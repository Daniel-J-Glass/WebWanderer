from flask import Flask, send_file, redirect, url_for,session, render_template, request
import time, os
from ProceduralSite import ProceduralSite
import secrets, uuid

app = Flask(__name__)
app.secret_key = secrets.token_hex(16)

@app.route('/')
def start():
    layout = f"A large title named \"WebWanderer\". A \"Start\" button that links to a random fake site (it can be anything from surreal to real. be imaginative.).\n\
            Text that says \"Disclaimer: Everything, including this, is procedurally generated by GPT3.5 and Stable Diffusion. You control your own destiny.\"\n\
            A button for Daniel Glass's Github that links to this URL:\nhttps://github.com/Daniel-J-Glass\n and opens it in a new tab.\n\
            It should be a short website."
    visuals="The website style should be like an early 2000s style retro website. It should have a nice color scheme. It should have a background image. Minimalist."
    name = "WebWanderer"
    website = ProceduralSite(purpose=f"This is the intro screen that will take you to a random site when you click start. You haven't clicked anything yet.\nName:\n{name}\nVisuals:{visuals}\nStrict Layout:\n{layout}\n")
    website.generate_site()
    website.generate_assets()

    return send_file(website.html_filename)


#TODO: Build capability for adding http://127.0.0.1:8080/next_page?search=jk&category=software&date=this-week to context
@app.route('/next_page')
def next_page():
    '''
    pass in parent UUID
    pass in unique button identifier (maybe)
    inside procedural site:
        pull parent where uuid = parent_uuid
        pull parent.purpose
        generate child with button, context, and parent (uuid and purpose)
            generate chid pushes new site record of:
                parent_uuid
                children/buttons = []
                name
                purpose
                html
                images
            self.uuid = push(child)

        push parent.children.append(child_uuid)

        find where button 
        modify parent HTML to have button reference child
        
    '''
      

    parent_purpose = request.args.get('parent_purpose', '')
    parent_uuid = request.args.get('parent_uuid', '')
    button_context = request.args.get('button_context', '')
    
    #The previous website is relatively unimportant, but this is it:\n{parent_purpose}\n
    purpose = f"The previous website was {parent_purpose}. The following is the next website with the new purpose from this context:\n{button_context}\nThis is the website after clicking that button."
    print(purpose)
    website = ProceduralSite(name="",visuals="",layout="",purpose = purpose)
    
    time_start = time.time()
    website.generate_site()
    time_site = time.time() - time_start
    time_start = time.time()
    website.generate_assets()
    time_assets = time.time()-time_start

    print(f"Generate Site: {time_site}\nGenerate Assets: {time_assets}")

    return send_file(website.html_filename)

@app.before_request
def set_session_dir():
    if 'session_id' not in session:
        session['session_id'] = str(uuid.uuid4()) # generate a unique ID for the session
    session_dir = os.path.join('/tmp', session['session_id'])
    if not os.path.exists(session_dir):
        os.makedirs(session_dir)
    static_path = os.path.join(session_dir,"static")
    app.static_folder = static_path
    if not os.path.exists(static_path):
        os.makedirs(static_path)
    template_path = os.path.join(session_dir,"template")
    if not os.path.exists(template_path):
        app.template_folder = template_path

@app.after_request
def clear_session_files(response):
    if session.get('session_id'):
        session_id = session['session_id']
        session_dir = os.path.join('/tmp', session_id)
        if os.path.exists(session_dir):
            for filename in os.listdir(session_dir):
                file_path = os.path.join(session_dir, filename)
                os.remove(file_path)
            os.rmdir(session_dir)
    return response